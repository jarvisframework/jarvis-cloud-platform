<?xml version="1.0" encoding="UTF-8"?>
<configuration debug="false" scan="false">
    <contextName>${APP_NAME}</contextName>
    <springProperty scope="context" name="LOG_MAXFILESIZE" source="logback.filesize" defaultValue="50MB"/>
    <springProperty scope="context" name="LOG_FILEMAXDAY" source="logback.filemaxday" defaultValue="7"/>
    <springProperty scope="context" name="ServerIP" source="spring.cloud.client.ip-address" defaultValue="0.0.0.0"/>
    <springProperty scope="context" name="ServerPort" source="server.port" defaultValue="0000"/>
    <springProperty scope="context" name="logLevel" source="log.level"/>


    <property name="log.path" value="logs"/>

    <!-- 彩色日志格式 -->
    <property name="CONSOLE_LOG_PATTERN"
              value="%clr(%d{yyyy-MM-dd HH:mm:ss}){faint} %clr(%level){blue} %clr(%logger{64}){cyan} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}"/>
    <property name="CONSOLE_LOG_PATTERN_NO_COLOR"
              value="%d{yyyy-MM-dd HH:mm:ss} %level %logger{64} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}"/>

    <!-- 彩色日志依赖的渲染类 -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter"/>
    <conversionRule conversionWord="wex"
                    converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"/>
    <conversionRule conversionWord="wEx"
                    converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"/>

    <!-- 控制台日志输出-->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <withJansi>true</withJansi>
        <encoder>
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- Log file debug output -->
    <appender name="debug" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.path}/debug.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${log.path}/%d{yyyy-MM, aux}/debug.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
            <maxFileSize>50MB</maxFileSize>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>%date [%thread] %-5level [%logger{50}] %file:%line - %msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- Log file error output -->
    <appender name="error" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.path}/error.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${log.path}/%d{yyyy-MM}/error.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
            <maxFileSize>50MB</maxFileSize>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>%date [%thread] %-5level [%logger{50}] %file:%line - %msg%n</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter"> <!--只输出Error级别日志-->
            <level>ERROR</level>
        </filter>
    </appender>

    <!-- 按照每天生成常规日志文件 -->
    <appender name="FileAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.path}/logs.log</file>
        <encoder>
            <pattern>${CONSOLE_LOG_PATTERN_NO_COLOR}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!-- 基于时间的分包策略 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${log.path}/logs.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!--保留时间,单位:天-->
            <maxHistory>${LOG_FILEMAXDAY}</maxHistory>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>${LOG_MAXFILESIZE}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <!--			<onMatch>ACCEPT</onMatch>-->
            <!--			<onMismatch>DENY</onMismatch>-->
        </filter>
    </appender>

    <!--线上正式环境建议采用异步日志，提高性能。-->
    <appender name="AsyncFileAppender" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>1024</queueSize>
        <!--默认为false,当queueSize满时，将阻塞-->
        <!--<neverBlock>false</neverBlock>-->
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="FileAppender"/>
    </appender>


    <!-- Level由高到低: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->

    <logger name="org.mybatis" level="ERROR">
        <appender-ref ref="error"/>
    </logger>
    <logger name="org.springframework" level="ERROR">
        <appender-ref ref="error"/>
    </logger>

    <springProfile name="dev,test">
        <logger name="com.jarvis" level="DEBUG" additivity="false">
            <appender-ref ref="error"/>
            <appender-ref ref="console"/>
            <appender-ref ref="AsyncFileAppender"/>
        </logger>
        <root level="INFO">
            <appender-ref ref="console"/>
            <appender-ref ref="AsyncFileAppender"/>
        </root>
    </springProfile>

    <springProfile name="prod">
        <logger name="com.jarvis" level="INFO" additivity="false">
            <appender-ref ref="console"/>
            <appender-ref ref="error"/>
            <appender-ref ref="AsyncFileAppender"/>
        </logger>
        <root level="ERROR">
            <appender-ref ref="console"/>
            <appender-ref ref="error"/>
            <appender-ref ref="AsyncFileAppender"/>
        </root>
    </springProfile>


</configuration>
